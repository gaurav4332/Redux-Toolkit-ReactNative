import {createSlice} from '@reduxjs/toolkit';

// Define the initial state of the users slice
const userSlice = createSlice({
  name: 'users', // Name of the slice
  initialState: [], // Initial state, an empty array for storing user data
  userData: {}, // Separate initial state property for storing user data as an object (this line should be part of the initial state object)
  reducers: {
    // Reducers to handle actions
    addUser(state, action) {
      state.push(action.payload); // Add the new user (payload) to the state array
    },
    addUserData(state, action) {
      state.userData = action.payload; // Set the userData property to the payload (this will overwrite the previous addUser reducer)
    },
    deleteUsers(state, action) {
     state.splice(action.payload,1)
    },
  },
});

export default userSlice.reducer; // Export the reducer to be used in the store
export const {addUser, addUserData, deleteUsers} = userSlice.actions; // Export the action creators generated by createSlice

/**
 * Explanation:
 * 1. createSlice:
 *    - The `createSlice` function from `@reduxjs/toolkit` is used to create a slice of the Redux store.
 *    - It automatically generates action creators and action types based on the reducers defined.
 *
 * 2. initialState:
 *    - The `initialState` is defined as an empty array to store user data.
 *    - Note: `userData: {}` should be part of the `initialState` object, not a separate property.
 *
 * 3. reducers:
 *    - `addUser(state, action)`:
 *      - This reducer adds a new user to the state array.
 *      - `state.push(action.payload)`: The payload (new user data) is pushed into the state array.
 *      - `console.log(action.payload)`: Logs the payload to the console for debugging purposes.
 *    - The second `addUser(state, action)`:
 *      - This reducer sets the `userData` property to the payload.
 *      - This overwrites the previous `addUser` reducer. You should combine these functionalities if you need both.
 *    - `deleteUsers(state, action)`:
 *      - This is a placeholder reducer for deleting users. Implement the logic as needed.
 *
 * 4. Exported Items:
 *    - `userSlice.reducer`: The reducer to be included in the Redux store.
 *    - `addUser`, `removeUser`, `deleteUsers`: The action creators generated by `createSlice`.
 */
